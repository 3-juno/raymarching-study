(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _WebGL = _interopRequireDefault(require("./modules/WebGL"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

window.onload = function () {
  var webgl = new _WebGL["default"]();
  window.addEventListener('resize', webgl.resize.bind(webgl));
};

},{"./modules/WebGL":3}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _triangle = _interopRequireDefault(require("./glsl/triangle.vert"));

var _triangle2 = _interopRequireDefault(require("./glsl/triangle.frag"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Triangle =
/*#__PURE__*/
function () {
  function Triangle(props) {
    _classCallCheck(this, Triangle);

    this.props = props;
    this.init();
  }

  _createClass(Triangle, [{
    key: "init",
    value: function init() {
      var geometry = this.createGeometry();
      var material = this.createMaterial();
      var triangle = new THREE.Mesh(geometry, material);
      this.props.scene.add(triangle);
    }
  }, {
    key: "createGeometry",
    value: function createGeometry() {
      var geometry = new THREE.BufferGeometry(); // prepare vertices of a triangle

      var data = [];
      data[0] = {
        vertex: new THREE.Vector3(-0.5, -0.5, 0),
        color: new THREE.Color(0xf9a1bc)
      };
      data[1] = {
        vertex: new THREE.Vector3(0.5, -0.5, 0),
        color: new THREE.Color(0xa9eee6)
      };
      data[2] = {
        vertex: new THREE.Vector3(0, 0.5, 0),
        color: new THREE.Color(0xfdfdc4)
      }; // create buffer array for vertices
      // 3 vertices * 3 types of parameter(x, y, z)

      var vertexBuffer = new Float32Array(data.length * 3); // 3 vertices * 3 types of parameter(r, g, b)

      var colorBuffer = new Float32Array(data.length * 3);

      for (var i = 0; i < data.length; i++) {
        var vertex = data[i].vertex;
        var color = data[i].color; // x position

        vertexBuffer[i * 3 + 0] = vertex.x; // y position

        vertexBuffer[i * 3 + 1] = vertex.y; // z position

        vertexBuffer[i * 3 + 2] = vertex.z; // red

        colorBuffer[i * 3 + 0] = color.r; // green

        colorBuffer[i * 3 + 1] = color.g; // blue

        colorBuffer[i * 3 + 2] = color.b;
      } // set buffer array into geometry;


      geometry.addAttribute('position', new THREE.BufferAttribute(vertexBuffer, 3));
      geometry.addAttribute('aColor', new THREE.BufferAttribute(colorBuffer, 3));
      return geometry;
    }
  }, {
    key: "createMaterial",
    value: function createMaterial() {
      // we use ShaderMaterial in all this series.
      var material = new THREE.ShaderMaterial({
        // prepare vertex shader
        vertexShader: _triangle["default"],
        // prepare fragment shader 
        fragmentShader: _triangle2["default"],
        // prepare uniforms if you need
        uniforms: {// uColor: {value: new THREE.Color(0xffa8af)}
        }
      });
      return material;
    }
  }]);

  return Triangle;
}();

exports["default"] = Triangle;

},{"./glsl/triangle.frag":4,"./glsl/triangle.vert":5}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Triangle = _interopRequireDefault(require("./Triangle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var WebGL =
/*#__PURE__*/
function () {
  function WebGL() {
    _classCallCheck(this, WebGL);

    this.init();
  }

  _createClass(WebGL, [{
    key: "init",
    value: function init() {
      this.$container = document.getElementById("wrapper"); // renderer

      this.renderer = new THREE.WebGLRenderer({
        antialias: true,
        alpha: true
      });
      this.renderer.setClearColor(0xfcfcfc);
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.$container.appendChild(this.renderer.domElement);
      this.pixelRatio = window.devicePixelRatio;
      this.renderer.setPixelRatio(this.pixelRatio); // scene

      this.scene = new THREE.Scene(); // camera
      // (it's not used this time...)

      var fov = 45;
      var windowAspect = window.innerWidth / window.innerHeight;
      var nearClipPlane = 0.1;
      var farClipPlane = 100;
      this.camera = new THREE.PerspectiveCamera(fov, windowAspect, nearClipPlane, farClipPlane);
      this.camera.position.set(0, 0, 10);
      this.camera.lookAt(this.scene.position);
      this.obj = new _Triangle["default"]({
        scene: this.scene
      });
      this.renderer.render(this.scene, this.camera);
    }
  }, {
    key: "resize",
    value: function resize() {
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.renderer.render(this.scene, this.camera); // this.camera.aspect = this.props.aspect;
      // this.camera.updateProjectionMatrix();
    }
  }]);

  return WebGL;
}();

exports["default"] = WebGL;

},{"./Triangle":2}],4:[function(require,module,exports){
module.exports = "varying vec3 vColor;\r\nvoid main(){\r\n  gl_FragColor = vec4(vColor, 1.0);\r\n}";

},{}],5:[function(require,module,exports){
module.exports = "attribute vec3 aColor;\r\nvarying vec3 vColor;\r\nvoid main(){\r\n  vColor = aColor;\r\n  gl_Position = vec4(position, 1.0);   \r\n}";

},{}]},{},[1]);
